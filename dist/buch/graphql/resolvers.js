"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolvers = void 0;
const errors_1 = require("./../service/errors");
const service_1 = require("../service");
// import type { IResolvers } from 'graphql-tools';
const shared_1 = require("../../shared");
const buchService = new service_1.BuchService();
// https://www.apollographql.com/docs/apollo-server/data/resolvers
// Zugriff auf Header-Daten, z.B. Token
// https://www.apollographql.com/docs/apollo-server/migration-two-dot/#accessing-request-headers
// https://www.apollographql.com/docs/apollo-server/security/authentication
// Resultat mit id (statt _id) und version (statt __v)
// __ ist bei GraphQL fuer interne Zwecke reserviert
const withIdAndVersion = (buch) => {
    const result = buch;
    result.id = buch._id;
    result.version = buch.__v;
    return buch;
};
const findBuchById = async (id) => {
    const buch = await buchService.findById(id);
    if (buch === undefined) {
        return;
    }
    return withIdAndVersion(buch);
};
const findBuecher = async (titel) => {
    const suchkriterium = titel === undefined ? {} : { titel };
    const buecher = await buchService.find(suchkriterium);
    return buecher.map((buch) => withIdAndVersion(buch));
};
const createBuch = async (buch) => {
    buch.datum = new Date(buch.datum);
    const result = await buchService.create(buch);
    console.log(`resolvers createBuch(): result=${JSON.stringify(result)}`);
    return result;
};
const logUpdateResult = (result) => {
    if (result instanceof errors_1.BuchInvalid) {
        shared_1.logger.debug(`resolvers updateBuch(): validation msg = ${JSON.stringify(result.msg)}`);
    }
    else if (result instanceof errors_1.TitelExists) {
        shared_1.logger.debug(`resolvers updateBuch(): vorhandener titel = ${result.titel}`);
    }
    else if (result instanceof errors_1.BuchNotExists) {
        shared_1.logger.debug(`resolvers updateBuch(): nicht-vorhandene id = ${result.id}`);
    }
    else if (result instanceof errors_1.VersionInvalid) {
        shared_1.logger.debug(`resolvers updateBuch(): ungueltige version = ${result.version}`);
    }
    else if (result instanceof errors_1.VersionOutdated) {
        shared_1.logger.debug(`resolvers updateBuch(): alte version = ${result.version}`);
    }
    else {
        shared_1.logger.debug(`resolvers updateBuch(): buch aktualisiert = ${JSON.stringify(result)}`);
        // TODO hier wird getrickst, um __v als "version" im Resultat zu haben
        const updateResult = result;
        updateResult.version = result.__v;
    }
};
const updateBuch = async (buch) => {
    var _a;
    shared_1.logger.debug(`resolvers updateBuch(): zu aktualisieren = ${JSON.stringify(buch)}`);
    const version = (_a = buch.__v) !== null && _a !== void 0 ? _a : 0;
    buch.datum = new Date(buch.datum);
    const result = await buchService.update(buch, version.toString());
    logUpdateResult(result);
    return result;
};
const deleteBuch = async (id) => {
    const result = await buchService.delete(id);
    shared_1.logger.debug(`resolvers deleteBuch(): result = ${result}`);
    return result;
};
// Queries passend zu "type Query" in typeDefs.ts
const query = {
    // Buecher suchen, ggf. mit Titel als Suchkriterium
    buecher: (_, { titel }) => findBuecher(titel),
    // Ein Buch mit einer bestimmten ID suchen
    buch: (_, { id }) => findBuchById(id),
};
const mutation = {
    createBuch: (_, buch) => createBuch(buch),
    updateBuch: (_, buch) => updateBuch(buch),
    deleteBuch: (_, { id }) => deleteBuch(id),
};
exports.resolvers /* : IResolvers */ = {
    Query: query,
    Mutation: mutation,
};
//# sourceMappingURL=data:application/json;base64,