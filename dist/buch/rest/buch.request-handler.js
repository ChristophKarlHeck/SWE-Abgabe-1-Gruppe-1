"use strict";
/* eslint-disable max-lines */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuchRequestHandler = void 0;
const tslib_1 = require("tslib");
const service_1 = require("../service");
const shared_1 = require("../../shared");
const json5_1 = tslib_1.__importDefault(require("json5"));
// export bei async und await:
// https://blogs.msdn.microsoft.com/typescript/2015/11/30/announcing-typescript-1-7
// http://tc39.github.io/ecmascript-export
// https://nemethgergely.com/async-function-best-practices#Using-async-functions-with-express
class BuchRequestHandler {
    constructor() {
        // Dependency Injection ggf. durch
        // * Awilix https://github.com/jeffijoe/awilix
        // * InversifyJS https://github.com/inversify/InversifyJS
        // * Node Dependency Injection https://github.com/zazoomauro/node-dependency-injection
        // * BottleJS https://github.com/young-steveo/bottlejs
        this.service = new service_1.BuchService();
    }
    // vgl Kotlin: Schluesselwort "suspend"
    // eslint-disable-next-line max-statements
    async findById(req, res) {
        const versionHeader = req.header('If-None-Match');
        shared_1.logger.debug(`BuchRequestHandler.findById(): versionHeader=${versionHeader}`);
        const { id } = req.params;
        shared_1.logger.debug(`BuchRequestHandler.findById(): id=${id}`);
        let buch;
        try {
            // vgl. Kotlin: Aufruf einer suspend-Function
            buch = await this.service.findById(id);
        }
        catch (err) {
            // Exception einer export async function bei der Ausfuehrung fangen:
            // https://strongloop.com/strongblog/comparing-node-js-promises-trycatch-zone-js-angular
            shared_1.logger.error(`BuchRequestHandler.findById(): error=${json5_1.default.stringify(err)}`);
            res.sendStatus(shared_1.HttpStatus.INTERNAL_ERROR);
            return;
        }
        if (buch === undefined) {
            shared_1.logger.debug('BuchRequestHandler.findById(): status=NOT_FOUND');
            res.sendStatus(shared_1.HttpStatus.NOT_FOUND);
            return;
        }
        shared_1.logger.debug(`BuchRequestHandler.findById(): buch=${json5_1.default.stringify(buch)}`);
        const versionDb = buch.__v;
        if (versionHeader === `"${versionDb}"`) {
            res.sendStatus(shared_1.HttpStatus.NOT_MODIFIED);
            return;
        }
        shared_1.logger.debug(`BuchRequestHandler.findById(): VersionDb=${versionDb}`);
        res.header('ETag', `"${versionDb}"`);
        const baseUri = shared_1.getBaseUri(req);
        // HATEOAS: Atom Links
        // eslint-disable-next-line no-underscore-dangle
        buch._links = {
            self: { href: `${baseUri}/${id}` },
            list: { href: `${baseUri}` },
            add: { href: `${baseUri}` },
            update: { href: `${baseUri}/${id}` },
            remove: { href: `${baseUri}/${id}` },
        };
        delete buch._id;
        delete buch.__v;
        delete buch.createdAt;
        delete buch.updatedAt;
        res.json(buch);
    }
    async find(req, res) {
        // z.B. https://.../buecher?titel=Alpha
        // => req.query = { titel: "Alpha' }
        const { query } = req;
        shared_1.logger.debug(`BuchRequestHandler.find(): queryParams=${json5_1.default.stringify(query)}`);
        let buecher;
        try {
            buecher = await this.service.find(query);
        }
        catch (err) {
            shared_1.logger.error(`BuchRequestHandler.find(): error=${json5_1.default.stringify(err)}`);
            res.sendStatus(shared_1.HttpStatus.INTERNAL_ERROR);
            return;
        }
        shared_1.logger.debug(`BuchRequestHandler.find(): buecher=${json5_1.default.stringify(buecher)}`);
        if (buecher.length === 0) {
            // Alternative: https://www.npmjs.com/package/http-errors
            // Damit wird aber auch der Stacktrace zum Client
            // uebertragen, weil das resultierende Fehlerobjekt
            // von Error abgeleitet ist.
            shared_1.logger.debug('BuchRequestHandler.find(): status = NOT_FOUND');
            res.sendStatus(shared_1.HttpStatus.NOT_FOUND);
            return;
        }
        const baseUri = shared_1.getBaseUri(req);
        // asynchrone for-of Schleife statt synchrones buecher.map()
        for await (const buch of buecher) {
            // HATEOAS: Atom Links je Buch
            // eslint-disable-next-line no-underscore-dangle
            buch._links = { self: { href: `${baseUri}/${buch._id}` } };
        }
        shared_1.logger.debug(`BuchRequestHandler.find(): buecher=${json5_1.default.stringify(buecher)}`);
        buecher.forEach((buch) => {
            delete buch._id;
            delete buch.__v;
            delete buch.createdAt;
            delete buch.updatedAt;
        });
        res.json(buecher);
    }
    async create(req, res) {
        const contentType = req.header(shared_1.mimeConfig.contentType);
        if (
        // Optional Chaining
        (contentType === null || contentType === void 0 ? void 0 : contentType.toLowerCase()) !== shared_1.mimeConfig.json) {
            shared_1.logger.debug('BuchRequestHandler.create() status=NOT_ACCEPTABLE');
            res.sendStatus(shared_1.HttpStatus.NOT_ACCEPTABLE);
            return;
        }
        const buchData = req.body; // eslint-disable-line @typescript-eslint/no-unsafe-assignment
        shared_1.logger.debug(`BuchRequestHandler.create(): body=${json5_1.default.stringify(buchData)}`);
        const result = await this.service.create(buchData);
        if (result instanceof service_1.BuchServiceError) {
            this.handleCreateError(result, res);
            return;
        }
        const buchSaved = result;
        const location = `${shared_1.getBaseUri(req)}/${buchSaved._id}`;
        shared_1.logger.debug(`BuchRequestHandler.create(): location=${location}`);
        res.location(location);
        res.sendStatus(shared_1.HttpStatus.CREATED);
    }
    async update(req, res) {
        var _a;
        const { id } = req.params;
        shared_1.logger.debug(`BuchRequestHandler.update(): id=${id}`);
        const contentType = req.header(shared_1.mimeConfig.contentType);
        if ((contentType === null || contentType === void 0 ? void 0 : contentType.toLowerCase()) !== shared_1.mimeConfig.json) {
            res.status(shared_1.HttpStatus.NOT_ACCEPTABLE);
            return;
        }
        const version = this.getVersionHeader(req, res);
        if (version === undefined) {
            return;
        }
        const buchData = req.body; // eslint-disable-line @typescript-eslint/no-unsafe-assignment
        buchData._id = id;
        shared_1.logger.debug(`BuchRequestHandler.update(): buch=${json5_1.default.stringify(buchData)}`);
        const result = await this.service.update(buchData, version);
        if (result instanceof service_1.BuchServiceError) {
            this.handleUpdateError(result, res);
            return;
        }
        shared_1.logger.debug(`BuchRequestHandler.update(): result=${json5_1.default.stringify(result)}`);
        const neueVersion = `"${(_a = result.__v) === null || _a === void 0 ? void 0 : _a.toString()}"`;
        res.set('ETag', neueVersion);
        res.sendStatus(shared_1.HttpStatus.NO_CONTENT);
    }
    async delete(req, res) {
        const { id } = req.params;
        shared_1.logger.debug(`BuchRequestHandler.delete(): id=${id}`);
        try {
            await this.service.delete(id);
        }
        catch (err) {
            shared_1.logger.error(`BuchRequestHandler.delete(): error=${json5_1.default.stringify(err)}`);
            res.sendStatus(shared_1.HttpStatus.INTERNAL_ERROR);
            return;
        }
        shared_1.logger.debug('BuchRequestHandler.delete(): NO_CONTENT');
        res.sendStatus(shared_1.HttpStatus.NO_CONTENT);
    }
    handleCreateError(err, res) {
        if (err instanceof service_1.BuchInvalid) {
            this.handleValidationError(err.msg, res);
            return;
        }
        if (err instanceof service_1.TitelExists) {
            this.handleTitelExists(err.titel, err.id, res);
            return;
        }
        if (err instanceof service_1.IsbnExists) {
            this.handleIsbnExists(err.isbn, err.id, res);
        }
    }
    handleIsbnExists(isbn, id, res) {
        const msg = `Die ISBN-Nummer "${isbn}" existiert bereits bei ${id}.`;
        shared_1.logger.debug(`BuchRequestHandler.handleCreateError(): msg=${msg}`);
        res.status(shared_1.HttpStatus.BAD_REQUEST)
            .set('Content-Type', 'text/plain')
            .send(msg);
    }
    handleValidationError(msg, res) {
        shared_1.logger.debug(`BuchRequestHandler.handleCreateError(): msg=${JSON.stringify(msg)}`);
        res.status(shared_1.HttpStatus.BAD_REQUEST).send(msg);
    }
    handleTitelExists(titel, id, res) {
        const msg = `Der Titel "${titel}" existiert bereits bei ${id}.`;
        shared_1.logger.debug(`BuchRequestHandler.handleCreateError(): msg=${msg}`);
        res.status(shared_1.HttpStatus.BAD_REQUEST)
            .set('Content-Type', 'text/plain')
            .send(msg);
    }
    getVersionHeader(req, res) {
        const versionHeader = req.header('If-Match');
        shared_1.logger.debug(`BuchRequestHandler.getVersionHeader() versionHeader=${versionHeader}`);
        if (versionHeader === undefined) {
            const msg = 'Versionsnummer fehlt';
            shared_1.logger.debug(`BuchRequestHandler.getVersionHeader(): status=428, message=${msg}`);
            res.status(shared_1.HttpStatus.PRECONDITION_REQUIRED)
                .set('Content-Type', 'text/plain')
                .send(msg);
            return;
        }
        const { length } = versionHeader;
        // eslint-disable-next-line @typescript-eslint/no-magic-numbers
        if (length < 3) {
            const msg = `Ungueltige Versionsnummer: ${versionHeader}`;
            shared_1.logger.debug(`BuchRequestHandler.getVersionHeader(): status=412, message=${msg}`);
            res.status(shared_1.HttpStatus.PRECONDITION_FAILED)
                .set('Content-Type', 'text/plain')
                .send(msg);
            return;
        }
        // slice: einschl. Start, ausschl. Ende
        const version = versionHeader.slice(1, -1);
        shared_1.logger.debug(`BuchRequestHandler.getVersionHeader(): version=${version}`);
        return version;
    }
    handleUpdateError(err, res) {
        if (err instanceof service_1.BuchInvalid) {
            this.handleValidationError(err.msg, res);
            return;
        }
        if (err instanceof service_1.BuchNotExists) {
            const { id } = err;
            const msg = `Es gibt kein Buch mit der ID "${id}".`;
            shared_1.logger.debug(`BuchRequestHandler.handleUpdateError(): msg=${msg}`);
            res.status(shared_1.HttpStatus.PRECONDITION_FAILED)
                .set('Content-Type', 'text/plain')
                .send(msg);
            return;
        }
        if (err instanceof service_1.TitelExists) {
            this.handleTitelExists(err.titel, err.id, res);
            return;
        }
        if (err instanceof service_1.VersionInvalid) {
            const { version } = err;
            const msg = `Die Versionsnummer "${version}" ist ungueltig.`;
            shared_1.logger.debug(`BuchRequestHandler.handleUpdateError(): msg=${msg}`);
            res.status(shared_1.HttpStatus.PRECONDITION_REQUIRED)
                .set('Content-Type', 'text/plain')
                .send(msg);
            return;
        }
        if (err instanceof service_1.VersionOutdated) {
            const { version } = err;
            const msg = `Die Versionsnummer "${version}" ist nicht aktuell.`;
            shared_1.logger.debug(`BuchRequestHandler.handleUpdateError(): msg=${msg}`);
            res.status(shared_1.HttpStatus.PRECONDITION_FAILED)
                .set('Content-Type', 'text/plain')
                .send(msg);
        }
    }
}
exports.BuchRequestHandler = BuchRequestHandler;
/* eslint-enable max-lines */
//# sourceMappingURL=data:application/json;base64,